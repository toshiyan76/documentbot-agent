name: CI/CD Pipeline
on:
  push:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/application/**'
      - '.github/workflows/main.yaml'
      - '.github/actions/**'
    branches:
      - main
  pull_request:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/application/**'
      - '.github/workflows/main.yaml'
      - '.github/actions/**'
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  BUILD_ACCOUNT_EMAIL: ${{ secrets.BUILD_ACCOUNT }}
  OPERATION_ACCOUNT_EMAIL: ${{ secrets.OPERATION_ACCOUNT }}
  WORKLOAD_IDENTITY_PROVIDER_NAME: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
  ARTIFACT_REPO: ${{ secrets.ARTIFACT_REPO }}

  ROOT_PATH_API: ./backend
  ROOT_PATH_WEB: ./frontend
  ROOT_PATH_IAC_APPLICATION: ./terraform/application

  IMAGE_SUFFIX_API: api
  IMAGE_SUFFIX_WEB: web

  API_URL: "http://localhost:8081"

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run Python linters
        run: |
          flake8 backend
          black --check backend
          isort --check-only backend
          
      - name: Run JavaScript/TypeScript linters
        run: |
          cd frontend
          npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run Python tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml
          
      - name: Run JavaScript/TypeScript tests
        run: |
          cd frontend
          npm test -- --coverage
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml,./frontend/coverage/coverage-final.json

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          service_account: ${{ env.BUILD_ACCOUNT_EMAIL }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER_NAME }}
          
      - name: Authorize Docker
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ env.REGION }}-docker.pkg.dev
          
      - name: Build and Push API Image
        uses: ./.github/actions/docker-image-handler
        with:
          context: ${{ env.ROOT_PATH_API }}
          image_suffix: ${{ env.IMAGE_SUFFIX_API }}
          
      - name: Build and Push Web Image
        uses: ./.github/actions/docker-image-handler
        with:
          context: ${{ env.ROOT_PATH_WEB }}
          image_suffix: ${{ env.IMAGE_SUFFIX_WEB }}
          build_args: |
            NEXT_PUBLIC_API_URL=${{ env.API_URL }}

  terraform:
    name: Infrastructure Update
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER_NAME }}
          service_account: ${{ env.OPERATION_ACCOUNT_EMAIL }}
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform Init
        run: |
          cd ${{ env.ROOT_PATH_IAC_APPLICATION }}
          terraform init
          
      - name: Terraform Plan
        run: |
          cd ${{ env.ROOT_PATH_IAC_APPLICATION }}
          terraform plan
        
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd ${{ env.ROOT_PATH_IAC_APPLICATION }}
          terraform apply -auto-approve
