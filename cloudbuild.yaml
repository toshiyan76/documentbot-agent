options:
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true

steps:
  # Configure docker auth
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['auth', 'configure-docker', 'us-central1-docker.pkg.dev']

  # Build the backend container image
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/backend'
      - '.'

  # Build the frontend container image
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'frontend'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/frontend'
      - '--build-arg'
      - 'NEXT_PUBLIC_API_URL=/api'
      - '.'

  # Push the backend container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/backend']

  # Push the frontend container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/frontend']

    # service.yamlを生成（テンプレートとして）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
         cat > service.yaml <<'EOF'
         apiVersion: serving.knative.dev/v1
         kind: Service
         metadata:
           annotations:
           name: docubot-service
         spec:
           template:
             spec:
               containers:
                 - name: frontend
                   image: us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/frontend
                   ports:
                     - containerPort: 3000
                   env:
                     - name: NEXT_PUBLIC_API_URL
                       value: "/api"
                 - name: backend
                   image: us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/backend
                   env:
                     - name: PORT
                       value: "8081"
                     - name: OPENAI_API_KEY
                       valueFrom:
                         secretKeyRef:
                           name: openai_api_key
                           key: latest
                     - name: LANGCHAIN_API_KEY
                       valueFrom:
                         secretKeyRef:
                           name: langchain_api_key
                           key: latest
                     - name: LANGCHAIN_PROJECT
                       valueFrom:
                         secretKeyRef:
                           name: langchain_project
                           key: latest
                     - name: LANGCHAIN_TRACING_V2
                       value: "true"
                     - name: LANGCHAIN_ENDPOINT
                       value: "https://api.smith.langchain.com"
         EOF

  # Cloud Run URL を取得
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-url'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      SERVICE_URL=$(gcloud run services describe docubot-service --region us-central1 --format='value(status.url)')
      echo "Service URL: $$SERVICE_URL"
      echo "$$SERVICE_URL" > /workspace/service_url.txt

  # Cloud Runへのデプロイ
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'services'
      - 'replace'
      - 'service.yaml'
      - '--region'
      - 'us-central1'

images:
 - 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/backend'
 - 'us-central1-docker.pkg.dev/$PROJECT_ID/docubot-repo/frontend'
